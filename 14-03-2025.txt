	jdbc - using prepared statement
=======================================
package com.jdbc;

import java.sql.*;
import java.util.Scanner;

import com.daoconnection.DBConnection;

public class Demo1 {

	public static void main(String[] args) {
		try {
			
	Connection con=	DBConnection.getConnection();	
		
//Statement st=con.createStatement();
Scanner s=new Scanner(System.in);
int d=s.nextInt();;
PreparedStatement ps=con.prepareStatement("select * from emp1 where id=?");
ps.setInt(1, d);
ResultSet rs=ps.executeQuery();
while(rs.next())
{
	System.out.println(rs.getInt(1)+" "+rs.getString(2));
}

	}
		catch(Exception e)
		{
			System.out.println(e);
		}

}
}
-----------------------------------------------------------------------------------------------------
2)
package com.jdbc;
package com.jdbc;

import java.sql.*;
import java.util.Scanner;

import com.daoconnection.DBConnection;

public class Demo1 {

	public static void main(String[] args) {
		try {
			
	Connection con=	DBConnection.getConnection();	
		
//Statement st=con.createStatement();
Scanner s=new Scanner(System.in);
int d=s.nextInt();
String s2=s.next();
String sql="insert into emp1 values(?,?)";
PreparedStatement ps=con.prepareStatement(sql);
ps.setInt(1, d);
ps.setString(2,s2);
int d1=ps.executeUpdate();
if(d1>0)
{
	System.out.println("1 row inserted");
}

	}
		catch(Exception e)
		{
			System.out.println(e);
		}

}
}

-----------------------------------------------------------



assignment from samadhan
========================

package com.model;

public class Student{
	private int studentId;
	private String studentName;
	private String dob;
	
	public Student(int studentId, String studentName, String dob) {
		super();
		this.studentId = studentId;
		this.studentName = studentName;
		this.dob = dob;
	}
	
	public int getStudentId() {
		return studentId;
	}
	public void setStudentId(int studentId) {
		this.studentId = studentId;
	}
	public String getStudentName() {
		return studentName;
	}
	public void setStudentName(String studentName) {
		this.studentName = studentName;
	}
	public String getDob() {
		return dob;
	}
	public void setDob(String dob) {
		this.dob = dob;
	}
}
----------------------
-------------------------
package com.daoconnection;

import java.sql.Connection;
import java.sql.DriverManager;

public class DBConnection {
public static Connection getConnection(){
		Connection con=null;
		try {
			Class.forName("org.postgresql.Driver");
			con=DriverManager.getConnection("jdbc:postgresql://localhost:5432/Sundaram","postgres","12345678");
		}
		catch(Exception e)
		{
			System.out.println(e);
		}
		return con;
	}
}
------------------------
package com.service;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.util.ArrayList;

import com.connection.DBConnection;
import com.model.Student;

public class ServiceDao {
	public static void insertStudents(ArrayList<Student> l) {
		Connection con=	DBConnection.getConnection();	
		for(Student s:l) {
			try {
				String sql="insert into student values(?,?,?)";
				PreparedStatement ps=con.prepareStatement(sql);
				ps.setInt(1,s.getStudentId());
				ps.setString(2,s.getStudentName());
				ps.setString(3,s.getDob());
				int d1=ps.executeUpdate();
			}catch(Exception e) {
				e.printStackTrace();
			}
		}
	}
	
	public void displayStudents() {
		
	}
}
---------------------
package com.util;

import java.util.ArrayList;

import com.model.Student;
import com.service.ServiceDao;

public class Main {
	public static void main(String[] args) {
		ArrayList<Student> students = new ArrayList();
		students.add(new Student(101,"Samadhan","20-08-2000"));
		students.add(new Student(102,"Unnati","19-09-2000"));
		students.add(new Student(103,"Jagannath","05-09-2000"));
		
		ServiceDao.insertStudents(students);
		
	}
}

---------------------------------------------------------------------------------------------------------------------------
from Madam
------------
package com.model;
import java.time.*;
public class Student {
int id;
String name;
LocalDate dob;
public Student(int id, String name, LocalDate dob) {
	super();
	this.id = id;
	this.name = name;
	this.dob = dob;
}
public int getId() {
	return id;
}
public void setId(int id) {
	this.id = id;
}
public String getName() {
	return name;
}
public void setName(String name) {
	this.name = name;
}
public LocalDate getDob() {
	return dob;
}
public void setDob(LocalDate dob) {
	this.dob = dob;
}
@Override
public String toString() {
	return "Student [id=" + id + ", name=" + name + ", dob=" + dob + "]";
}

}
-------------------------------------------------------------
package com.connection;

import java.sql.Connection;
import java.sql.DriverManager;

public class DBConnection {
public static Connection getConnection()
{
	Connection con=null;

	try {
	Class.forName("org.postgresql.Driver");
	con=DriverManager.getConnection("jdbc:postgresql://localhost/sundaram","postgres","Shreemb2004r");
}
	catch(Exception e)
	{
		System.out.println(e);
	}
	return con;
}}
------------------------------------------------------------------------
package com.service;
import java.util.*;

import com.connection.DBConnection;
import com.model.Student;
import java.sql.*;
import java.sql.Date;
import java.time.LocalDate;
public class ServiceDao {
public void insertRecords(List<Student> l)
{try {
	Connection con=DBConnection.getConnection();
	String sql="insert into student values(?,?,?)";
	PreparedStatement ps=con.prepareStatement(sql);
	int i=0;
	for(Student s:l)
	{
		ps.setInt(1,s.getId());
		ps.setString(2, s.getName());
		ps.setDate(3, Date.valueOf(s.getDob()));
		// i=ps.executeUpdate();
		
		//i++;
		ps.addBatch();
	}
	
	ps.executeBatch();
}
catch(Exception e)
{
	System.out.println(e);
}
}
public void  getAllstudents()
{
	List<Student> l=new ArrayList();
	{
		try {
			Connection con=DBConnection.getConnection();
			Statement st=con.createStatement();
		ResultSet rs=	st.executeQuery("select * from student");
			while(rs.next())
				{
				int id=rs.getInt(1);
				String name=rs.getString(2);
				java.sql.Date d=rs.getDate(3);
				LocalDate d1=d.toLocalDate();
				Student s=new Student(id,name,d1);
				l.add(s);
				}
		}
		catch(Exception e)
		{
			System.out.println(e);
		}
		for(Student s1:l)
		{
			System.out.println(s1);
		}
	}
}



}
------------------------------------------------------------
package com.utils;
import java.util.*;
import java.time.LocalDate;
import com.model.*;
import com.service.ServiceDao;

public class Main {

	public static void main(String[] args) {
		List<Student> l=new ArrayList();
		l.add(new Student(16,"ann",LocalDate.parse("2000-09-10")));
		l.add(new Student(17,"bann",LocalDate.parse("2001-09-10")));
		l.add(new Student(18,"kann",LocalDate.parse("2002-09-10")));
ServiceDao dao=new ServiceDao();
dao.insertRecords(l);
System.out.println("from main");
//dao.getAllstudents();

	}
}
=======================================================================================================================================

CALLABLE STATEMENTS:
-------------------

CREATE OR REPLACE PROCEDURE find_square (
    num IN NUMBER,
    result OUT NUMBER
) AS
BEGIN
    result := num * num;
END;
-------------------------------------------------
import java.sql.*;

public class CallableStatementSquareExample {
    public static void main(String[] args) {
        // Database credentials
        String url = "jdbc:oracle:thin:@localhost:1521:xe";
        String user = "your_username"; 
        String password = "your_password"; 

        Connection conn = null;
        CallableStatement cstmt = null;

        try {
            
            Class.forName("oracle.jdbc.driver.OracleDriver");

           
            conn = DriverManager.getConnection(url, user, password);

            
            String sql = "{ call find_square(?, ?) }";
            cstmt = conn.prepareCall(sql);

            
            int inputNumber = 5;  
            cstmt.setInt(1, inputNumber);

          
            cstmt.registerOutParameter(2, Types.NUMERIC);

        
            cstmt.execute();

           
            int squareResult = cstmt.getInt(2);
            System.out.println("Square of " + inputNumber + " is: " + squareResult);

        } catch (Exception e) {
            e.printStackTrace();
        } finally {
           
            try {
                if (cstmt != null) cstmt.close();
                if (conn != null) conn.close();
            } catch (SQLException ex) {
                ex.printStackTrace();
            }
        }
    }
}
 

